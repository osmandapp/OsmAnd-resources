option java_package = "net.osmand.binary";
option java_outer_classname = "OsmandOdb";
package OsmAnd.OBF;


//
//  STORAGE LAYER: Storing primitives.
//

// IMPORTANT :  These messages are not intented to be parsed by google engine (because of the random access to the file)
// The main difference that size of that messages is not var int and is always fixed int size
message OsmAndStructure {
	required uint32 version = 1;

	// System.currentTimeMillis()
	required int64 dateCreated = 18;

	optional OsmAndOwner owner = 33;

	// first version of map index was 3.
	// encoded as fixed32 length delimited  
	repeated OsmAndAddressIndex addressIndex = 7;

	// encoded as fixed32 length delimited  
	repeated OsmAndTransportIndex transportIndex = 4;

	// slight changes previous version was 5
	// encoded as fixed32 length delimited
	repeated OsmAndPoiIndex poiIndex = 8;

	// first version of map index was 2.
	// encoded as fixed32 length delimited
	repeated OsmAndMapIndex mapIndex = 6;

	// encoded as fixed32 length delimited
	repeated OsmAndRoutingIndex routingIndex = 9;

	// encoded as fixed32 length delimited
	repeated OsmAndHHRoutingIndex hhRoutingIndex = 10;

	// last field should version again (to check consistency)
	required uint32 versionConfirm = 32;
}

message OsmAndTileBox {
	// everything is encoded as 31 tile zoom
	required uint32 left = 1;
	required uint32 right = 2;
	required uint32 top = 3;
	required uint32 bottom = 4;
}

// String table, contains the common strings in each block.
message StringTable {
	repeated string s = 1;
}

message IndexedStringTable {
	// common prefix for all strings inside
	optional string prefix = 1;

	// key, val and subtables are mixed and order is preserved by key (ascending)
	// so that's example of data : key1,val1,subtables1,key2,val2,key3,val3,subtables3,subtables3
	repeated string key = 3;
	// the shift to the data or one uint data itself
	repeated fixed32 val = 4;
	// subtables are supposed to make search faster instead of searching through all strings 
	// it's enough to read prefix in the header
	repeated IndexedStringTable subtables = 5;
}


///////////////////////
////  Map messages ////
///////////////////////
message OsmAndMapIndex {

	required string name = 2;

	repeated MapEncodingRule rules = 4;
	message MapEncodingRule {
		required string tag = 3;
		optional string value = 5;
		// it is optional because natural order in block of rules
		// is the same as id (id is 1-based and order)
		optional uint32 id = 7;
		// min zoom combination exists
		optional uint32 minZoom = 9;
		// "additional" flag is encoded as %2 == 1
		optional uint32 type = 10;
	}

	// encoded as fixed32 length delimited
	repeated MapRootLevel levels = 5;
	message MapRootLevel {
		required int32 maxZoom = 1;
		required int32 minZoom = 2;
		required int32 left = 3;
		required int32 right = 4;
		required int32 top = 5;
		required int32 bottom = 6;

		repeated MapDataBox boxes = 7;

		repeated MapDataBlock blocks = 15;
	}

	message MapDataBox {
		required sint32 left = 1; // delta encoded
		required sint32 right = 2; // delta encoded
		required sint32 top = 3; // delta encoded
		required sint32 bottom = 4; // delta encoded

		//shift from mapdatabox start to message MapDataBlock
		optional fixed32 shiftToMapData = 5;
		// true (byte = 1) - full ocean, false (byte = 0) - full land
		optional bool ocean = 6;

		repeated MapDataBox boxes = 7;
	}
}

message MapDataBlock {
	// coordinates can take much space 4*4*count of data blocks=
//	required sint32 left = 1; // delta encoded
//	required sint32 right = 2; // delta encoded
//	required sint32 top = 3; // delta encoded
//	required sint32 bottom = 4; // delta encoded
	
	optional uint64 baseId = 10;

	// in future here can be optional raster tile
	repeated MapData dataObjects = 12;

	optional StringTable stringTable = 15;


}


message MapData {
  // array of delta x,y sint32 (CodedIinputStream) >> 5
  // first x delta to Tree.left, y to delta Tree.top (next delta to previous)
  // point, line or outer polygon coordinates
  optional bytes coordinates = 1;
  optional bytes areaCoordinates = 2;
  repeated bytes polygonInnerCoordinates = 4;

  // array of raw var int types
  optional bytes additionalTypes = 6;
  // array of raw var int types
  required bytes types = 7;

  // pair x,y (sint32) of delta encoded to center of <coordinates> 26th zoom
  optional bytes labelcoordinates = 8;

  // repeated array<pair<tagId : raw_var_int, indexOfStringInParent : raw_var_int> >
  optional bytes stringNames = 10; // in parent block

  required sint64 id = 12; // delta encoded

  optional bytes rasterBytes = 15;

}



////////////////////////////
/////  Address messages ////
////////////////////////////

message OsmAndAddressIndex {
	
	required string name = 1;
	optional string name_en = 2;
	
	optional OsmAndTileBox boundaries = 3;
	// before cities
	optional StringTable attributeTagsTable = 4;

	// encoded as fixed32 length delimited
	// 1) cities and towns - type 1,  2) postcodes - type 2, 3) villages - type 3
	repeated CitiesIndex cities = 6;
	message CitiesIndex {
		enum CitiesType {
			CitiesOrTowns = 1;
			Postcodes = 2;
			Villages = 3;
		}
		required CitiesType type = 2;

		// not mixed
		// the list of the cities and the blocks are synchronized by the order (so even empty block will be written)
		repeated CityIndex cities = 5;

		repeated CityBlockIndex blocks = 7;
	}

	// encoded as fixed32 length delimited
	optional OsmAndAddressNameIndexData nameIndex = 7;

	
}

message OsmAndAddressNameIndexData {
	// shift to AddressNameIndexData starting from first OsmAndAddressNameIndexData message
	// encoded as fixed32 length delimited
	required IndexedStringTable table = 4;

	repeated AddressNameIndexData atom = 7;
		message AddressNameIndexData {
			// shift is measured from start (before length)
			repeated AddressNameIndexDataAtom atom = 4;
	}
}



message AddressNameIndexDataAtom {
	 optional string name = 1;
	 optional string nameEn = 2;
	 // 1 - city, 2 - postcode, 3 - village,  4 - street
	 required uint32 type = 3; 

	 // start mixed 
	 // shift from start AddressNameIndexData (!) to ...Index
	 repeated int32 shiftToIndex = 5;
	 // optional used in case of type=street
	 repeated int32 shiftToCityIndex = 6;
	 // coordinates v2.3
	 repeated uint32 xy16 = 7;
	 // end mixed
}


message CityIndex {
	// should be written the first (for city), for postcode is optional
	optional uint32 city_type = 1; // 0-5 enum CityType
	
	required string name = 2;
	optional string name_en = 3;
	optional uint64 id = 4;
	
	required uint32 x = 5; // x tile of 31 zoom
	required uint32 y = 6; // y tile of 31 zoom

	repeated uint32 attributeTagIds = 7;
	repeated string attributeValues = 8;
	
	// shift from start CityIndex (without length) to cityBlockIndex
	optional fixed32 shiftToCityBlockIndex = 10;
}

message CityBlockIndex {

	// shift from start cityBlockIndex to CityIndex 
	optional fixed32 shiftToCityIndex = 4;
	
	// city boundary
	//optional CityBoundaryIndex = 6;

	// buildings that doesn't belong to the street
	repeated BuildingIndex buildings = 10;
	
	repeated StreetIndex streets = 12;
}

//message CityBoundaryIndex {
	// 1 way is encoded as bytes (raw array of x, y delta-encoded as uint32)
//	repeated bytes outerWays;
	
//	repeated bytes innerWays;
//}

message StreetIndex {
	required string name = 1;
	optional string name_en = 2;
	
	required sint32 x = 3; // delta encoded to parent 24 zoom
	required sint32 y = 4; // delta encoded to parent 24 zoom
	
	repeated StreetIntersection intersections = 5;

	optional uint64 id = 6;

	repeated uint32 attributeTagIds = 7;
	repeated string attributeValues = 8;
	
	repeated BuildingIndex buildings = 12;

}

message StreetIntersection {
	required string name = 2;
	optional string name_en = 3;
	
	required sint32 intersectedX = 4; // delta encoded to parent street x 24 zoom
	required sint32 intersectedY = 5; // delta encoded to parent street y 24 zoom

	repeated uint32 attributeTagIds = 7;
	repeated string attributeValues = 8;
	
} 

message BuildingIndex {
	required string name = 1;
	optional string name_en = 2;
	
	// used for interpolation
	optional string name2 = 3;
	optional string name_en2 = 4;

	// special values 0 means - nothing, -1 - all, -2 - even, -3 - odd, -4, alphabetic
	// positive - just positive interpolation 
	optional sint32 interpolation = 5;
	
	required sint32 x = 7; // delta encoded to parent 24 zoom
	required sint32 y = 8; // delta encoded to parent 24 zoom
	
	// used for interpolation
	optional sint32 x2 = 9; // delta encoded to parent 24 zoom
	optional sint32 y2 = 10; // delta encoded to parent 24 zoom
	
	optional uint64 id = 13;
	optional string postcode = 14;

	repeated uint32 attributeTagIds = 15;
	repeated string attributeValues = 16;
	
	repeated uint32 attributeTagIds2 = 17;
	repeated string attributeValues2 = 18;
	
}

////////////////////////////
//// Transport messages ////
////////////////////////////

message TransportRoutes {
	repeated TransportRoute routes = 6; 
}

message TransportRoute {
	required uint64 id = 1;
	
	optional uint32 type = 3; // reference in string table
	optional uint32 operator = 4; // reference in string table
	optional string ref = 5;
	optional uint32 name = 6; // reference in string table
	optional uint32 name_en = 7; // reference in string table
	optional uint32 distance = 8; // distance in meters
	optional uint32 color = 9; // reference in string table
	
	repeated TransportRouteStop directStops = 15;
	// deprecated (not used any more)
	repeated TransportRouteStop reverseStops = 16;

	// array of delta x,y sint32 (CodedIinputStream) >> 5 (precision 31 >> 5)
	// first x,y - 31 coordinates (>>5), next points is delta to previous
	// point, line or outer polygon coordinates
	// 0, 0 split geometry (for not connected segments)
	optional bytes geometry = 17;

	repeated TransportRouteSchedule scheduleTrip = 18;
	// "tag/value" reference in string table
	repeated uint32 attributeTagIds = 19;
	// array of bytes = varint32 (reference of tag in string table) + UTF-8 value bytes
	repeated bytes attributeTextTagValues = 20;
}

message IncompleteTransportRoutes {
	repeated IncompleteTransportRoute routes = 6; 
}

message IncompleteTransportRoute {
	required uint64 id = 1;
	optional uint32 type = 3; // reference in string table
	optional uint32 operator = 4; // reference in string table
	optional uint32 ref = 5; // reference in string table
	// optional uint32 name = 6; 
	
	required uint32 routeRef = 7; // shift from OsmAndTransportIndex to the route in TransportRoute section
	
	repeated uint32 missingStops = 8;  // shift from OsmAndTransportIndex to stops that are missing
}

message TransportRouteSchedule {
	// array of raw var int
	// 10-seconds based intervals between stops arrivals;
	optional bytes avgStopIntervals = 1;	

	// optional 10-seconds based (0, if non-provided or less < 10 seconds)
	optional bytes avgWaitIntervals = 2;

	// 10-seconds delta based intervals for trips departing from first stop
	// 1st trip is diff from 00:00:00
	optional bytes tripIntervals = 3;

	// exceptions	
	repeated TransportRouteScheduleException exceptions = 8;
}

message TransportRouteScheduleException {
	// provided if exception applicable to the trips
	repeated uint32 tripIndexes = 1;

	// provided if exception applicable to the stop
	repeated uint32 stopIndexes = 2;

	// indicates whether the trip or stop available in certain restriction (default true)
	optional bool available = 3;

	// if 1 number is provided, the delay is applicable to all trips/stops, otherwise it has numbers for each route or stop
	// delay is measured in X * 10 seconds
	repeated uint32 delayArrival = 5;

	repeated int32 deltaWaitInterval = 6;


	// day of week exceptions, Monday - 0, Sunday - 6
	repeated uint32 dayOfWeekRestriction = 7;

	// day of year exceptions 01.01.2000 - 0, 01.02.2000 - 1
	repeated uint32 dayOfYearRestriction = 8;

}

message TransportRouteStop {
	required sint64 id = 1; // delta encoded to previous stop (first stop is delta to 0)
	required sint32 dx = 2; // delta encoded to previous stop (24 zoom)
	required sint32 dy = 3; // delta encoded to previous stop (24 zoom)
	
	required uint32 name = 6; // index in message table
	optional uint32 name_en = 7; // index in message table
}

message TransportStop {
	required sint32 dx = 1; // delta encoded to parent (24 zoom) to left
	required sint32 dy = 2; // delta encoded to parent (24 zoom) to top

	required sint64 id = 5; // delta encoded to parent base id 
	
	required uint32 name = 6; // index in message table
	optional uint32 name_en = 7; // index in message table
	// array of bytes (array of pairs <raw var int>)
	optional bytes additionalNamePairs = 8;
	repeated TransportStopExit exits = 9;
	
	repeated uint32 routes = 16; // -shift to transport route containing that stop 
					// TransportStop.Message.start -  sizeof(TransportStop.Message.length) - routes[i] 
					//				= TransportRoute.Message.start - sizeof(TransportRoute.Message.length)
					// message is started when body is started 
	repeated uint64 deletedRoutesIds = 20; // ids of routes that do not contain this stop anymore

	// ids of [routes] that contain this stop
	// - length and values correspond to [routes] array
	// - old version (< 08/2019) files don't have them
	// - default algorithm makes them sorted 
	repeated uint64 routesIds = 22;

}

message TransportStopExit {
	required sint32 dx = 1; // delta x
	required sint32 dy = 2; // delta y
	required uint32 ref = 3;
}

message TransportStopsTree {
	required sint32 left = 1; // delta encoded (24 zoom)
	required sint32 right = 2; // delta encoded (24 zoom)
	required sint32 top = 3; // delta encoded (24 zoom)
	required sint32 bottom = 4; // delta encoded (24 zoom)
	
	// encoded as fixed32 length delimited
	repeated TransportStopsTree subtrees = 7;
	
	repeated TransportStop leafs = 8;


	// written as last
	optional uint64 baseId = 16;
}
			
message OsmAndTransportIndex {
	optional string name = 1;
		
	// encoded as fixed32 length delimited
	optional TransportRoutes routes = 3; // routes 

	// encoded as fixed32 length delimited
	optional TransportStopsTree stops = 6;
	
	optional IncompleteTransportRoutes incompleteRoutes = 8;
	
	required StringTable stringTable = 9;
	
}

////////////////////////////
/////	POI messages	/////
////////////////////////////

message OsmAndPoiIndex {
	required string name = 1;
	
	required OsmAndTileBox boundaries = 2;
	
	repeated OsmAndCategoryTable categoriesTable = 3;
	
	// encoded as fixed32 length delimited
	optional OsmAndPoiNameIndex nameIndex = 4;

	optional OsmAndSubtypesTable subtypesTable = 5;
	
	// encoded as fixed32 length delimited
	repeated OsmAndPoiBox boxes = 6; // children 

	// encoded as fixed32 length delimited
	repeated OsmAndPoiBoxData poiData = 9;

}

message OsmAndPoiNameIndex {
	// shift to OsmAndPoiNameIndexData starting from OsmAndPoiIndex message
	// encoded as fixed32 length delimited
	required IndexedStringTable table = 3;

	repeated OsmAndPoiNameIndexData data = 5;
	message OsmAndPoiNameIndexData {
		// can contain multiple data offsets
		repeated OsmAndPoiNameIndexDataAtom atoms = 3;
	}
}

message OsmAndPoiNameIndexDataAtom {
	// fields do not preserve order define, they are repeating 
	optional uint32 zoom = 2;
	optional uint32 x = 3;
	optional uint32 y = 4;
	// shift to OsmAndPoiBoxData message from OsmAndPoiIndex.start
	// message is started when body is started
	optional fixed32 shiftTo = 14;
}

message OsmAndCategoryTable {
	// general id of poi type is calculated  ((subcategory_order << 7) | category_order)
	required string category = 1;
	repeated string subcategories = 3;
}

message OsmAndSubtypesTable {

	// id calculated
	// 1. if subtypes_order <= 31 : ( (subtypeValue << 5) | subtypes_order) << 1
	// 2. if subtypes_order > 31  : ( (subtypeValue << 16) | subtypes_order) << 1 + 1	 
	repeated OsmAndPoiSubtype subtypes = 4;
}

message OsmAndPoiSubtype {
	required string name = 1;
	optional string tagname = 2; // same to name if not present
	required bool isText = 3;
	optional uint32 frequency = 5;
	optional uint32 subtypeValuesSize = 6;
	repeated string subtypeValue = 8; 
}



message OsmAndPoiBox {
	required uint32 zoom = 1; // delta encoded to parent
	// size is one tile
	required sint32 left = 2; // delta encoded (zoom)
	required sint32 top = 3; // delta encoded (zoom)
	
	optional OsmAndPoiCategories categories = 4;
	
	// encoded as fixed32 length delimited
	repeated OsmAndPoiBox subBoxes = 10;
	
	// must be the last
	optional fixed32 shiftToData = 14; // shift to OsmAndPoiBoxData message from OsmAndPoiIndex.start
									  // message is started when body is started
}

message OsmAndPoiCategories {
	// sorted categories
	repeated uint32 categories = 3;

	repeated uint32 subcategories = 5;
}

message OsmAndPoiBoxData {
  optional uint32 zoom = 1; // zoom level
  optional uint32 x = 2; // x tile
  optional uint32 y = 3; // y tile
  
  repeated OsmAndPoiBoxDataAtom poiData = 5;
}

message OsmAndPoiBoxDataAtom {
  required sint32 dx = 2; // delta encoded to OsmAndPoiBox on 24 zoom
  required sint32 dy = 3; // delta encoded to OsmAndPoiBox on 24 zoom

  repeated uint32 categories = 4;
  repeated uint32 subcategories = 5; // v1.7

  optional string name = 6;
  optional string nameEn = 7;
  optional uint64 id = 8;  

  // deprecated from v1.7
  optional string openingHours = 10;
  optional string site = 11;
  optional string phone = 12;
  optional string note = 13;

  repeated uint32 textCategories = 14; // v1.7
  repeated string textValues = 15;
  optional int32 precisionXY = 16; // precision in 1-xy-xy-xy binary format
}

/**
 * Id table 1-based. Map of sequential ids to real ids
 * [1,2,3....n] -> [a1, ... an]
 * a1,.. an - (ideally sorted) set of longs
 */
message IdTable {
	// diff between 2 ids
	repeated sint64 routeId = 1;
}

message RestrictionData {
	required int32 type = 1;
	required int32 from = 2;
	required int32 to = 3;
	optional int32 via = 4;
}


message RouteData {
	// array of delta x,y sint32 (CodedIinputStream) >> 5
	// first x delta to Tree.left, y to delta Tree.top (next delta to previous)
	required bytes points = 1;


	// continuous array of pairs
	//  [pointIndex - int32, pointTypes - bytes]
	// bytes - array of raw var int types
	optional bytes pointTypes = 4;

	// continuous array of triples
	// [pointIndex - int32, tagId - raw_var_int, indexOfStringInParent : raw_var_int]
	optional bytes pointNames = 5;

	// array of raw var int types
  	required bytes types = 7;

  	required int32 routeId = 12; // id internal

	// repeated array<pair<tagId : raw_var_int, indexOfStringInParent : raw_var_int> >
  	optional bytes stringNames = 14; // in parent block

}

message OsmAndRoutingIndex {
	required string name = 1;
	repeated RouteEncodingRule rules = 2;
	message RouteEncodingRule {
		required string tag = 3;
		required string value = 5;
		// it is optional because natural order in block of rules
		// is the same as id (id is 1-based and order)
		optional uint32 id = 7;
	}

	// encoded as fixed32 length delimited
	repeated RouteDataBox rootBoxes = 3;

	// encoded as fixed32 length delimited
	repeated RouteDataBox basemapBoxes = 4;

	repeated RouteDataBlock blocks = 5;
	message RouteDataBox {
		// for root box is absolute coordinates
		required sint32 left = 1; // delta encoded
		required sint32 right = 2; // delta encoded
		required sint32 top = 3; // delta encoded
		required sint32 bottom = 4; // delta encoded

		//shift from routeDataBox start to message RouteDataBlock
		optional fixed32 shiftToData = 5;
		repeated RouteDataBox boxes = 7;
	}

	message RouteDataBlock {
		// coordinates can take much space 4*4*count of data blocks=
		//	required sint32 left = 1; // delta encoded
		//	required sint32 right = 2; // delta encoded
		//	required sint32 top = 3; // delta encoded
		//	required sint32 bottom = 4; // delta encoded
		optional IdTable idTable = 5;
		repeated RouteData dataObjects = 6;
		repeated RestrictionData restrictions = 7;
		optional StringTable stringTable = 8;

	}
}

// HH Routing index need to be consistent with global file and include fully referenced clusters
message OsmAndHHRoutingIndex {
	required int64 edition = 1; // usually timestamp creation checks consistency
	required string profile = 2; // main profile car, pedestrian ... 
	repeated string profileParams = 3; // later encoded as profileIds in points / segments
	optional StringTable tagValuesTable = 4;

	required HHRoutePointsBox pointBoxes = 5;
	repeated HHRouteBlockSegments pointSegments = 6;

	message HHRoutePointsBox {
		// for root box is absolute coordinates same as RouteDataBox
		required sint32 left = 2; // delta encoded
		required sint32 right = 3; // delta encoded
		required sint32 top = 4; // delta encoded
		required sint32 bottom = 5; // delta encoded

		repeated HHRoutePointsBox boxes = 6;
		repeated HHRouteNetworkPoint points = 7;
	}

	message HHRouteNetworkPoint {
		required int32 id = 1; // id in file to reference shortcuts
		required sint32 dx = 2; // delta encoded to HHRoutePointsBox (start point 31 coordinates)
  		required sint32 dy = 3; // delta encoded to HHRoutePointsBox (start point 31 coordinates)
		required int32 globalId = 4;
		required int64 roadId = 5;
		required int32 roadStartEndIndex = 6; // (startIndex << 1) + (endIndex > startIndex ? 1 : 0)
		optional int32 clusterId = 7;
		optional int32 dualPointId = 8;
		optional int32 dualClusterId = 9;
		repeated int32 profileIds = 10; // applied to specific profiles (if empty then applied to all profiles)
		optional int32 partialInd = 11; // partialInd > 0, means that it's a partially written node without clusters
		repeated int32 tagValueIds = 12 [packed=true];
	}

	message HHRouteBlockSegments {
		required int32 idRangeStart = 1; // range of point ids stored in block
		required int32 idRangeLength = 2; // blocks are sorted by ids 
		optional int32 profileId = 3; // profileParams specific segments (required on top level)


		repeated HHRouteBlockSegments innerBlocks = 6; // potentially array to shifts could be used to speedup 
		repeated HHRoutePointSegments pointSegments = 4;
	}

	message HHRoutePointSegments {
		// required int32 pointId = 1;
		required bytes segmentsIn = 2; // segments times encoded according to cluster in
		required bytes segmentsOut = 3; // segments times encoded according to cluster out
	}

}

message OsmAndOwner {
    required string name = 1;
    optional string resource = 2;
    optional string description = 3;
    optional string pluginid = 4;
}
